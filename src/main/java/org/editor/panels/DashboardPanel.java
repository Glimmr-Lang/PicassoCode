/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.editor.panels;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.File;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JList;
import org.editor.EditorWindow;
import org.editor.events.ListAction;
import org.editor.fs.FilePersistance;
import org.editor.icons.Icons;

/**
 *
 * @author hexaredecimal
 */
public class DashboardPanel extends javax.swing.JPanel {

	/**
	 * Constructs a new DashboardPanel and initializes its UI components and recent files list.
	 */
	public DashboardPanel() {
		initComponents();
		loadPersistedState();
	}

	/**
   * Initializes and arranges all UI components for the dashboard panel.
   *
   * <p>
   * This method sets up the layout, panels, lists, buttons, labels, and other controls
   * that comprise the dashboard interface, including the "Recent Files" and "Recent Projects" sections,
   * community and update controls, and informational links.
   * </p>
   *
   * <p>
   * This method is auto-generated by the GUI form editor and should not be modified manually.
   * </p>
   */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    rFilesList = new javax.swing.JList<>(filesModel);
    jPanel2 = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    jCheckBox1 = new javax.swing.JCheckBox();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jPanel3 = new javax.swing.JPanel();
    jScrollPane3 = new javax.swing.JScrollPane();
    rProjList = new javax.swing.JList<>();

    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/applogo/dashboard.png"))); // NOI18N
    jLabel1.setToolTipText("");
    jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jLabel1.setName(""); // NOI18N

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Recent Files", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 13), new java.awt.Color(255, 153, 51))); // NOI18N
    jPanel1.setAutoscrolls(true);

    jScrollPane2.setViewportView(rFilesList);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane2)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
        .addContainerGap())
    );

    jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    jButton1.setText("Community");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    jButton2.setText("Check for updates");

    jButton3.setText("Community");

    jCheckBox1.setText("Show at startup");

    jLabel2.setFont(new java.awt.Font("sansserif", 1, 17)); // NOI18N
    jLabel2.setText("Discover and learn");

    jLabel3.setText("<html>\n<a href=\"https://github.com/glimmr-lang\">Shortcut Cheatsheet</a><br>\n\n<h2>Connect Online</h2>\n<a href=\"https://github.com/glimmr-lang\">Github</a><br>\n<a href=\"https://github.com/glimmr-lang\">Discord</a><br>\n<a href=\"https://github.com/glimmr-lang\">Reddit</a><br>\n<a href=\"https://github.com/glimmr-lang\">Website</a><br>\n<a href=\"https://github.com/glimmr-lang\">X.com</a>\n</html>");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel3)
          .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jButton3)
              .addComponent(jCheckBox1)
              .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBox1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton1)
        .addGap(18, 18, 18)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton3)
        .addContainerGap())
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Recent Projects", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 13), new java.awt.Color(255, 153, 51))); // NOI18N
    jPanel3.setAutoscrolls(true);

    jScrollPane3.setViewportView(rProjList);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane3)
        .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(56, 56, 56)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
          .addComponent(jLabel1))
        .addContainerGap(56, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(17, Short.MAX_VALUE))
    );
  }/****
   * Handles the action event for the "Community" button.
   *
   * Currently not implemented.
   */

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:
  }/**
	 * Loads recent files from persistent storage and populates the recent files list with their paths and icons.
	 *
	 * Configures the recent files list to use a custom cell renderer and attaches an action to open a file in a new editor tab when selected.
	 */

	private void loadPersistedState() {
		FilePersistance
						.getRecentFiles()
						.forEach(item -> {
							var fp = new File(item);
							var path = fp.toPath().toString();
							filesModel.addElement(new ListItem(path, Icons.getIcon("file")));
						});

		Action displayAction = new AbstractAction() {
			/**
			 * Handles the selection of a recent file from the list and opens it in a new editor tab.
			 *
			 * @param e the action event triggered by selecting a file in the recent files list
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				var list = (JList<ListItem>) e.getSource();
				var value = list.getSelectedValue().name;
				EditorWindow.addTab(new File(value).toPath(), null);
			}
		};

		rFilesList.setCellRenderer(new ListItemRenderer());
		var _ = new ListAction(rFilesList, displayAction);
	}

	private static DefaultListModel<ListItem> filesModel = new DefaultListModel<>();
	private static DefaultListModel<ListItem> projectModel = new DefaultListModel<>();

	class ListItem {

		String name;
		Icon icon;

		/**
		 * Constructs a list item with the specified display name and icon.
		 *
		 * @param name the display name or path for the list item
		 * @param icon the icon to represent the list item
		 */
		public ListItem(String name, Icon icon) {
			this.name = name;
			this.icon = icon;
		}
	}

	class ListItemRenderer extends DefaultListCellRenderer {

		/**
			 * Returns a component that renders a list item with its associated icon and name.
			 *
			 * @param list the JList being rendered
			 * @param value the ListItem to render
			 * @param index the index of the item in the list
			 * @param isSelected true if the item is selected
			 * @param cellHasFocus true if the cell has focus
			 * @return a JLabel displaying the item's name and icon
			 */
		@Override
		public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			ListItem item = (ListItem) value;
			JLabel label = (JLabel) super.getListCellRendererComponent(list, item.name, index, isSelected, cellHasFocus);
			label.setIcon(item.icon);
			return label;
		}
	}

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JCheckBox jCheckBox1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JList<ListItem> rFilesList;
  private javax.swing.JList<String> rProjList;
  // End of variables declaration//GEN-END:variables
}
